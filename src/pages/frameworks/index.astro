---
import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout 
  title="Learning Frameworks | Sambit Maps" 
  description="Frameworks and approaches I'm developing, learning, and working with"
  mode="academic"
>
  <div class="frameworks-header">
    <h1>Things I'm Learning</h1>
    <p class="frameworks-subtitle">
      Frameworks and approaches I'm developing, testing, and figuring out. Some work better than others.
    </p>
    
    <div class="frameworks-meta">
      <div class="meta-item">
        <span class="meta-label">Total Frameworks:</span>
        <span class="meta-value">1</span>
      </div>
      <div class="meta-item">
        <span class="meta-label">In Development:</span>
        <span class="meta-value">1</span>
      </div>
      <div class="meta-item">
        <span class="meta-label">Published:</span>
        <span class="meta-value">0</span>
      </div>
    </div>
  </div>

  <div class="filter-controls">
    <div class="filter-group">
      <label for="maturity-filter">Filter by Maturity:</label>
      <select id="maturity-filter" name="maturity">
        <option value="">All Maturity Levels</option>
        <option value="hypothesis">Hypothesis</option>
        <option value="framework">Framework</option>
        <option value="theory">Theory</option>
      </select>
    </div>
    
    <div class="filter-group">
      <label for="scope-filter">Filter by Scope:</label>
      <select id="scope-filter" name="scope">
        <option value="">All Scopes</option>
        <option value="local">Local</option>
        <option value="domain-specific">Domain Specific</option>
        <option value="universal">Universal</option>
      </select>
    </div>
  </div>

  <div id="frameworks-results" class="frameworks-results">
    <section class="frameworks-section">
      <h2 class="section-title">
        Current Frameworks
        <span class="frameworks-count">(1)</span>
      </h2>
      
      <div class="frameworks-grid">
        <article class="framework-card" data-maturity="framework" data-scope="domain-specific">
          <div class="card-header">
            <div class="card-meta">
              <span class="maturity-badge" data-maturity="framework">framework</span>
              <span class="scope-badge" data-scope="domain-specific">domain-specific</span>
            </div>
            <time class="card-date">May 18, 2025</time>
          </div>
          
          <h3 class="card-title">
            <a href="/frameworks/complexity-pluralism">Pluralistic Framework for Complexity Analysis</a>
          </h3>
          
          <p class="card-description">A methodological framework for selecting appropriate analytical approaches based on the type of complexity encountered. Rather than seeking unified theory, advocates for systematic methodological pluralism.</p>
          
          <div class="card-domain">
            <h4>Domains:</h4>
            <div class="domain-tags">
              <span class="domain-tag">methodology</span>
              <span class="domain-tag">complexity-science</span>
              <span class="domain-tag">epistemology</span>
            </div>
          </div>
          
          <div class="card-applications">
            <h4>Applications:</h4>
            <div class="application-tags">
              <span class="application-tag">research-design</span>
              <span class="application-tag">systems-analysis</span>
              <span class="application-tag">knowledge-synthesis</span>
            </div>
          </div>
          
          <div class="card-tags">
            <span class="framework-tag">complexity</span>
            <span class="framework-tag">methodology</span>
            <span class="framework-tag">pluralism</span>
            <span class="framework-tag">systems-thinking</span>
          </div>
        </article>
      </div>
    </section>
  </div>
</BaseLayout>

<style>
  .frameworks-header {
    text-align: center;
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 2px solid var(--accent);
  }

  .frameworks-header h1 {
    font-family: var(--font-serif);
    font-size: 3rem;
    color: var(--primary);
    margin-bottom: 1rem;
  }

  .frameworks-subtitle {
    max-width: 700px;
    margin: 0 auto 2rem auto;
    font-size: 1.125rem;
    line-height: 1.7;
    color: var(--secondary);
    font-style: italic;
  }

  .frameworks-meta {
    display: flex;
    justify-content: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .meta-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
  }

  .meta-label {
    font-size: 0.875rem;
    color: var(--secondary);
  }

  .meta-value {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--accent);
  }

  .filter-controls {
    display: flex;
    gap: 2rem;
    margin-bottom: 3rem;
    padding: 1.5rem;
    background: var(--surface);
    border: 1px solid var(--secondary);
    border-radius: 0.5rem;
    flex-wrap: wrap;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    min-width: 200px;
  }

  .filter-group label {
    font-weight: 500;
    color: var(--primary);
    font-size: 0.875rem;
  }

  .filter-group select {
    padding: 0.5rem;
    border: 1px solid var(--secondary);
    border-radius: 0.375rem;
    background: var(--bg);
    color: var(--primary);
    cursor: pointer;
  }

  .frameworks-section {
    margin-bottom: 3rem;
  }

  .section-title {
    font-family: var(--font-serif);
    font-size: 1.75rem;
    color: var(--primary);
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .frameworks-count {
    font-size: 1rem;
    color: var(--secondary);
    font-weight: 400;
  }

  .frameworks-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
  }

  .framework-card {
    background: var(--surface);
    border: 1px solid var(--secondary);
    border-radius: 0.75rem;
    padding: 2rem;
    transition: all 0.3s ease;
    position: relative;
  }

  .framework-card:hover {
    border-color: var(--accent);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
  }

  .card-meta {
    display: flex;
    gap: 0.5rem;
  }

  .maturity-badge, .scope-badge {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  .maturity-badge[data-maturity="framework"] {
    background: #f0fdf4;
    color: #15803d;
  }

  .maturity-badge[data-maturity="hypothesis"] {
    background: #fef3c7;
    color: #92400e;
  }

  .maturity-badge[data-maturity="theory"] {
    background: #dbeafe;
    color: #1e40af;
  }

  .scope-badge {
    background: var(--bg);
    color: var(--secondary);
    border: 1px solid var(--secondary);
  }

  .card-date {
    font-size: 0.875rem;
    color: var(--secondary);
  }

  .card-title {
    margin: 0 0 1rem 0;
    font-size: 1.375rem;
    line-height: 1.3;
  }

  .card-title a {
    color: var(--primary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .card-title a:hover {
    color: var(--accent);
  }

  .card-description {
    color: var(--secondary);
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }

  .card-domain, .card-applications {
    margin-bottom: 1rem;
  }

  .card-domain h4, .card-applications h4 {
    font-size: 0.875rem;
    color: var(--primary);
    margin: 0 0 0.5rem 0;
    font-weight: 600;
  }

  .domain-tags, .application-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.375rem;
  }

  .domain-tag {
    background: var(--accent);
    color: white;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
  }

  .application-tag {
    background: #e0e7ff;
    color: #3730a3;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
  }

  .card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.375rem;
  }

  .framework-tag {
    background: var(--bg);
    color: var(--secondary);
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    border: 1px solid var(--secondary);
  }

  .no-results {
    text-align: center;
    padding: 3rem;
    color: var(--secondary);
    font-style: italic;
  }

  @media (max-width: 768px) {
    .frameworks-header h1 {
      font-size: 2.5rem;
    }
    
    .frameworks-grid {
      grid-template-columns: 1fr;
    }
    
    .filter-controls {
      flex-direction: column;
      gap: 1rem;
    }
    
    .frameworks-meta {
      gap: 1rem;
    }
  }
</style>

<script>
console.log('Frameworks page script loading...');

function filterFrameworks() {
  console.log('filterFrameworks called');
  const maturityFilter = document.getElementById('maturity-filter').value;
  const scopeFilter = document.getElementById('scope-filter').value;
  
  console.log('Filters:', { maturityFilter, scopeFilter });
  
  const cards = document.querySelectorAll('.framework-card');
  const section = document.querySelector('.frameworks-section');
  let visibleCount = 0;
  
  console.log('Found cards:', cards.length);
  
  cards.forEach(card => {
    const cardMaturity = card.getAttribute('data-maturity');
    const cardScope = card.getAttribute('data-scope');
    
    console.log('Card data:', { cardMaturity, cardScope });
    
    let showCard = true;
    
    // Apply maturity filter
    if (maturityFilter && maturityFilter !== '' && cardMaturity !== maturityFilter) {
      showCard = false;
    }
    
    // Apply scope filter
    if (scopeFilter && scopeFilter !== '' && cardScope !== scopeFilter) {
      showCard = false;
    }
    
    console.log('Show card:', showCard);
    
    if (showCard) {
      card.style.display = 'block';
      visibleCount++;
    } else {
      card.style.display = 'none';
    }
  });
  
  console.log('Visible count:', visibleCount);
  
  // Update count in section title
  const countSpan = section.querySelector('.frameworks-count');
  if (countSpan) {
    countSpan.textContent = `(${visibleCount})`;
  }
  
  // Show/hide section and show no results message
  const resultsContainer = document.getElementById('frameworks-results');
  if (visibleCount === 0) {
    section.style.display = 'none';
    let noResults = document.querySelector('.no-results');
    if (!noResults) {
      noResults = document.createElement('div');
      noResults.className = 'no-results';
      noResults.innerHTML = '<p>No frameworks match the selected filters.</p>';
      resultsContainer.appendChild(noResults);
    }
    noResults.style.display = 'block';
  } else {
    section.style.display = 'block';
    const noResults = document.querySelector('.no-results');
    if (noResults) {
      noResults.style.display = 'none';
    }
  }
}

// Add event listeners
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, setting up event listeners');
  
  const maturityFilter = document.getElementById('maturity-filter');
  const scopeFilter = document.getElementById('scope-filter');
  
  console.log('Found elements:', { maturityFilter: !!maturityFilter, scopeFilter: !!scopeFilter });
  
  if (maturityFilter) {
    maturityFilter.addEventListener('change', filterFrameworks);
    console.log('Maturity filter listener added');
  }
  
  if (scopeFilter) {
    scopeFilter.addEventListener('change', filterFrameworks);
    console.log('Scope filter listener added');
  }
});

console.log('Frameworks page script loaded');
</script>